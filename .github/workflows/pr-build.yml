# PR Build Check - Validates that the iOS app builds successfully
name: PR Build Check

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - ".github/**"
      - "todo.md"

jobs:
  build:
    name: Build iOS App
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData/*/SourcePackages/checkouts
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve Swift Package Dependencies
        run: |
          xcodebuild -resolvePackageDependencies \
            -project Talkyo.xcodeproj \
            -scheme Talkyo
        working-directory: .

      - name: Build for iOS Simulator
        run: |
          # Start timing
          BUILD_START=$(date +%s)

          xcodebuild \
            -project Talkyo.xcodeproj \
            -scheme Talkyo \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' \
            -configuration Debug \
            build \
            CODE_SIGNING_ALLOWED=NO \
            -derivedDataPath ./DerivedData

          # Calculate build time
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        working-directory: .

      # Device build commented out for speed
      # - name: Build for iOS Device (Release)
      #   run: |
      #     xcodebuild \
      #       -project Talkyo.xcodeproj \
      #       -scheme Talkyo \
      #       -destination 'generic/platform=iOS' \
      #       -configuration Release \
      #       build \
      #       CODE_SIGNING_ALLOWED=NO
      #   working-directory: .

      - name: Collect Build Statistics
        id: stats
        run: |
          # Find the app bundle
          APP_PATH=$(find ./DerivedData -name "Talkyo.app" -type d | head -1)

          if [ -n "$APP_PATH" ]; then
            # Calculate bundle size in MB
            BUNDLE_SIZE_BYTES=$(du -sb "$APP_PATH" | cut -f1)
            BUNDLE_SIZE_MB=$(echo "scale=2; $BUNDLE_SIZE_BYTES / 1024 / 1024" | bc)
          else
            BUNDLE_SIZE_MB="N/A"
          fi

          # Count dependencies
          if [ -f "Talkyo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved" ]; then
            DEP_COUNT=$(grep -o '"identity"' "Talkyo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved" | wc -l | tr -d ' ')
          else
            DEP_COUNT="0"
          fi

          # Format build time
          BUILD_TIME_FORMATTED="${BUILD_TIME}s"
          if [ $BUILD_TIME -ge 60 ]; then
            MINUTES=$((BUILD_TIME / 60))
            SECONDS=$((BUILD_TIME % 60))
            BUILD_TIME_FORMATTED="${MINUTES}m ${SECONDS}s"
          fi

          # Save to outputs
          echo "bundle_size=$BUNDLE_SIZE_MB" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME_FORMATTED" >> $GITHUB_OUTPUT
          echo "dep_count=$DEP_COUNT" >> $GITHUB_OUTPUT

          # Create comment body
          cat << EOF >> $GITHUB_ENV
          COMMENT_BODY<<COMMENT_EOF
          ## 📱 iOS Build Statistics

          ✅ **Build Status**: Successful
          🎯 **Target**: iOS Simulator (iPhone 16, iOS 18.5)
          📦 **Bundle Size**: ${BUNDLE_SIZE_MB} MB
          ⏱️ **Build Time**: ${BUILD_TIME_FORMATTED}
          📚 **Dependencies**: ${DEP_COUNT} Swift packages

          > Build completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          COMMENT_EOF
          EOF
        working-directory: .

      - name: Update PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = process.env.COMMENT_BODY;
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            // Look for existing bot comment
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📱 iOS Build Statistics')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

